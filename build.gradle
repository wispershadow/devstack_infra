buildscript{
        repositories {
        mavenLocal()

        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version")
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath 'io.github.robwin:jgitflow-gradle-plugin:0.6.0'
        classpath "io.spring.gradle:dependency-management-plugin:1.0.7.RELEASE"
        classpath "org.jlleitschuh.gradle:ktlint-gradle:8.1.0"
    }
}

plugins {
    id "org.sonarqube" version "2.7"
}

apply from: "${rootDir}/gradle/idea.gradle"
apply from: "${rootDir}/gradle/release.gradle"

group 'io.wispershadow.infra'
version '1.0-SNAPSHOT'

subprojects {
    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'maven-publish'
    apply plugin: "io.spring.dependency-management"
    apply plugin: 'jacoco'
    apply plugin: "kotlin-spring"
    apply plugin: "org.jlleitschuh.gradle.ktlint"
    apply plugin: 'kotlin-kapt'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    compileKotlin {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8

        kotlinOptions {
            javaParameters = true
            jvmTarget = "1.8"
            apiVersion = "1.3"
            languageVersion = "1.3"
        }
    }
	
    compileTestKotlin {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
	
        kotlinOptions {
            jvmTarget = "1.8"
            apiVersion = "1.3"
            languageVersion = "1.3"
        }
    }

    test.dependsOn(ktlintMainSourceSetCheck,ktlintTestSourceSetCheck)

    jacoco {
        toolVersion = "0.8.3"
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            html.enabled true
            xml.destination file("${buildDir}/reports/jacoco.xml")
        }
    }

    sonarqube {
        properties {
            property "sonar.coverage.jacoco.xmlReportPath", "build/reports/jacoco.xml"
        }
    }
    

    repositories {
        mavenCentral()
        jcenter()

        maven {
            url "https://${airwallex_ci}/repository/lib-release/libs-release-local/"
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
    }

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:$spring_boot_version") {
                bomProperty("kotlin.version", "$kotlin_version")
            }
        }
    }

    dependencies {
        //compile "org.springframework.boot:spring-boot"
        //compile "org.springframework.boot:spring-boot-starter-web"
        
        //compile "org.springframework.boot:spring-boot-autoconfigure"
        compile "org.slf4j:slf4j-api"
        compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
        testCompile(
                "junit:junit",
                "org.hamcrest:hamcrest-library",
                "org.mockito:mockito-core",
                "org.assertj:assertj-core"
        )
        implementation "org.apache.logging.log4j:log4j-slf4j-impl"
        testImplementation "io.mockk:mockk:${mockk_kotlin_version}"
        testImplementation "com.github.tomakehurst:wiremock:2.24.0"
    }

    configurations {
        all*.exclude(group: 'org.springframework.boot', module: 'spring-boot-starter-logging')
        all*.exclude(group: 'com.datastax.cassandra')
    }
    
    task initSourceFolders {
        sourceSets*.java.srcDirs*.each { it.mkdirs() }
        sourceSets*.kotlin.srcDirs*.each { it.mkdirs() }
        sourceSets*.resources.srcDirs*.each { it.mkdirs() }
    }
	
    releaseFinish.dependsOn publish

    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId "$project.group"
                version "$project.version"
                from components.java
                artifactId project.name.replace('/', '_')
            }
        }
    }

    publishing {
        repositories {
            maven {
                def repoKey = 'lib-release/libs-release-local'
                if (project.version.toString().endsWith("-SNAPSHOT"))
                    repoKey = 'lib-snapshot/libs-snapshot-local'
                url "https://${airwallex_ci}/repository/${repoKey}"
                credentials {
                    username "${artifactory_user}"
                    password "${artifactory_password}"
                }
            }
        }
    }
}	